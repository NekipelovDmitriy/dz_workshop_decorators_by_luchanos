# часть 2 - medium
print('\n####### ЧАСТЬ 2 ########\n')


"""
1. Написать функцию, которая на вход будет принимать 
произвольное количество аргументов и возвращать их сумму.
"""

def medium_1(*args):
    return sum(args)

print(medium_1(1,2,3,4,5,6))



"""
2. В сигнатуре функции объявить 4 обязательных аргумента, 
но оставить возможность передавать в неё сколько угодно 
дополнительных аргументов. Попробуйте вызвать функцию в 
следующих ситуациях и объясните результат:
-- прокинуть в функцию только 1 аргумент
-- прокинуть аргументы таким образом, чтобы обязательный 
аргумент был передан одновременно позиционно и по ключу
-- создать кортеж со значениями и распаковать его при вызове 
функции с помощью *
-- создать словарь со значениями и распаковать его при вызове 
функции с помощью * и **: что наблюдаете? Почему?
"""

def medium_2(a,b,c,d, *args, **kwargs):
    s = sum([a,b,c,d])
    for i in args:
        s += i
    return s

print(medium_2(1,2,3,4,5,6))



"""
прокинуть в функцию только 1 аргумент
"""

try:
    print(medium_2(1)) 
except TypeError:
    print('missing 3 required positional arguments: b, c, and d')

# РЕЗУЛЬТАТ: у функции 4 обязательных аргумента, при передачи одного аргумента ей не хватает еще 3х



"""
прокинуть аргументы таким образом, чтобы обязательный 
аргумент был передан одновременно позиционно и по ключу
"""

try:
    print(medium_2(1, 2,3,4, a=1))
except TypeError:
    print('got multiple values for argument a')
    
# РЕЗУЛЬТАТ: попытка передать 2 значения в один аргумент приводит к ошибке



"""
создать кортеж со значениями и распаковать его при 
вызове функции с помощью *
"""

try:
    tp = (1,2,3,4,5) 
    print(medium_2(*tp))
except Exception:
    print('не работает')
    
# РЕЗУЛЬТАТ: распаковка кортежа с помощью * работает при передачи его в качестве аргумента функции



"""
создать словарь со значениями и распаковать его при вызове 
функции с помощью * и **: что наблюдаете? Почему?
"""

dicct = {'a':1, 'b':2,'c':3,'d':4}

try:
    print(medium_2(*dicct))
except TypeError:
    print('unsupported operand type(s) for +: int and str - передеаются ключи')
    
# РЕЗУЛЬТАТ: при распаковке словаря одной * в функцию передаются только ключи, а не значения

try:
    print(medium_2(**dicct))
except Exception:
    print('не работает')

# РЕЗУЛЬТАТ: использование  ** передает в функцию значения словаря и приводит к требуемому результату



# Спасибо за работу, чувствую как в голове материал укладывается все лучше!